version: '3'
services:

  db:
    image: "postgres:13.4-alpine"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 8s
      timeout: 8s
      retries: 5

  api:
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      - db
    links:
      - db
    volumes:
      - ./src:/floy/src
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=postgres
    ports:
      - "8000:8000"
    command: bash -c "python3 -m src.floy.main"
    restart: on-failure

  pacs_provider:
    image: floymedical/pacs_technical_challenge:latest
    ports:
      - "4242:4242"
      - "6667:6667"
      - "8042:8042"
    depends_on:
      - db

  client:
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      - pacs_provider
      - api
    links:
      - pacs_provider
      - api
    volumes:
      - ./src:/floy/src
    environment:
      - PACS_PROVIDER_HOST=pacs_provider
      - PACS_PROVIDER_PORT=6667
      - API_HOST=api
      - API_PORT=8000
    command: bash -c "python3 -m src.pac_client.client"
#    restart: on-failure

  automation:
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      - pacs_provider
      - api
    links:
      - pacs_provider
      - api
    volumes:
      - ./src:/floy/src
      - ./sample_data:/floy/sample_data
    environment:
      - HEADLESS=true
      - PACS_PROVIDER_HOST=pacs_provider
      - PACS_PROVIDER_PORT=8042
      - API_HOST=api
      - API_PORT=8000
    command: bash -c "python3 -m src.automation_pac_client.fill_pacs"
    restart: unless-stopped
    deploy:
      replicas: 1
